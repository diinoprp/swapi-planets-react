{"version":3,"sources":["helpers/API.js","components/PlanetCard/PlanetCard.js","helpers/utils.js","components/TwinklingStars/TwinklingStars.js","components/App/App.js","serviceWorker.js","index.js"],"names":["planetCount","getRandomPlanetId","Promise","resolve","then","fetch","response","json","data","count","Math","floor","random","mainTheme","createMuiTheme","palette","primary","main","secondary","useStyles","makeStyles","box","display","justifyContent","card","maxWidth","minHeight","marginTop","backgroundColor","border","concat","zIndex","flex","flexDirection","alignSelf","textAlign","alignItems","cardContent","minWidth","title","fontSize","planetInfoItem","paddingLeft","paddingRight","marginBottom","planetInfoData","color","PlanetCard","_useState","useState","_useState2","Object","slicedToArray","planet","setPlanet","_useState3","_useState4","isFetching","setIsFetching","classes","getRandomPlanet","planetId","res","result","catch","console","error","useEffect","react_default","a","createElement","Fragment","ThemeProvider","theme","Box","className","Card","dist","size","css","CardContent","Typography","variant","component","name","style","population","climate","terrain","filmsCount","filmsString","utils","films","length","CardActions","width","Button","onClick","fullWidth","fontWeight","TwinklingStars","App","Container","TwinklingStars_TwinklingStars","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","ReactDOM","render","components_App_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.53028e49.chunk.js","sourcesContent":["let planetCount;\r\n\r\n// Gets how many planets exist in the Star Wars Universe\r\nfunction getPlanetCount() {\r\n  if (typeof planetCount !== \"undefined\") {\r\n    return new Promise(resolve => resolve()).then(() => planetCount);\r\n  } else {\r\n    return fetch(`https://swapi.co/api/planets/`)\r\n      .then(response => response.json())\r\n      .then(data => (planetCount = data.count));\r\n  }\r\n}\r\n\r\n// Gets a random planet Id based on the total planet count\r\nfunction getRandomPlanetId() {\r\n  return getPlanetCount().then(() =>\r\n    Math.floor(Math.random() * planetCount + 1)\r\n  );\r\n}\r\n\r\n// fetches a random planet from the Star Wars API\r\nexport function getRandomPlanet() {\r\n  return getRandomPlanetId().then(planetId =>\r\n    fetch(`https://swapi.co/api/planets/${planetId}/`).then(res => res.json())\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport * as API from \"../../helpers/API\";\r\nimport * as utils from \"../../helpers/utils\";\r\nimport { ClipLoader } from \"react-spinners\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport {\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Button,\r\n  Typography,\r\n  Box,\r\n  createMuiTheme,\r\n  makeStyles\r\n} from \"@material-ui/core\";\r\n\r\nconst mainTheme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: `#FFE81F`\r\n    },\r\n    secondary: {\r\n      main: `#000`\r\n    }\r\n  }\r\n});\r\n\r\nconst useStyles = makeStyles({\r\n  box: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\"\r\n  },\r\n  card: {\r\n    maxWidth: 450,\r\n    minHeight: 400,\r\n    marginTop: 50,\r\n    backgroundColor: mainTheme.palette.secondary.main,\r\n    border: `solid 1px ${mainTheme.palette.primary.main}`,\r\n    zIndex: 1,\r\n    display: \"flex\",\r\n    flex: 1,\r\n    flexDirection: \"column\",\r\n    alignSelf: \"center\",\r\n    textAlign: \"left\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\"\r\n  },\r\n  cardContent: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    minWidth: \"100%\"\r\n  },\r\n  title: {\r\n    fontSize: \"2em\"\r\n  },\r\n  planetInfoItem: {\r\n    paddingLeft: 25,\r\n    paddingRight: 25,\r\n    marginBottom: 15,\r\n    fontSize: \"1.2em\"\r\n  },\r\n  planetInfoData: {\r\n    color: \"white\"\r\n  }\r\n});\r\n\r\nexport default function PlanetCard() {\r\n  const [planet, setPlanet] = useState(null);\r\n  const [isFetching, setIsFetching] = useState(false);\r\n  const classes = useStyles();\r\n  const { primary } = mainTheme.palette;\r\n\r\n  const getRandomPlanet = () => {\r\n    setIsFetching(true);\r\n    API.getRandomPlanet()\r\n      .then(result => {\r\n        setPlanet(result);\r\n        setIsFetching(false);\r\n      })\r\n      .catch(() => {\r\n        console.error(\"Unable to load planet\");\r\n        setIsFetching(false);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getRandomPlanet();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={mainTheme}>\r\n        <Box className={classes.box}>\r\n          <Card className={classes.card}>\r\n            {isFetching || !planet ? (\r\n              <ClipLoader\r\n                color={primary.main}\r\n                size={75}\r\n                css={{ marginTop: 150 }}\r\n              />\r\n            ) : (\r\n              <>\r\n                <CardContent className={classes.cardContent}>\r\n                  <Typography\r\n                    variant=\"h5\"\r\n                    component=\"h2\"\r\n                    className={classes.title}\r\n                    color=\"primary\"\r\n                  >\r\n                    {planet.name}\r\n                  </Typography>\r\n                  <hr\r\n                    style={{\r\n                      marginTop: 25,\r\n                      marginBottom: 25,\r\n                      border: `1px solid ${primary.main}`\r\n                    }}\r\n                  />\r\n                  <Typography\r\n                    className={classes.planetInfoItem}\r\n                    color=\"primary\"\r\n                  >\r\n                    Population:{\" \"}\r\n                    <span className={classes.planetInfoData}>\r\n                      {planet.population}\r\n                    </span>\r\n                  </Typography>\r\n                  <Typography\r\n                    className={classes.planetInfoItem}\r\n                    color=\"primary\"\r\n                  >\r\n                    Climate:{\" \"}\r\n                    <span className={classes.planetInfoData}>\r\n                      {planet.climate}\r\n                    </span>\r\n                  </Typography>\r\n                  <Typography\r\n                    className={classes.planetInfoItem}\r\n                    color=\"primary\"\r\n                  >\r\n                    Terrain:{\" \"}\r\n                    <span className={classes.planetInfoData}>\r\n                      {planet.terrain}\r\n                    </span>\r\n                  </Typography>\r\n                  <Typography\r\n                    className={classes.planetInfoItem}\r\n                    style={{ alignSelf: \"center\", marginTop: 50 }}\r\n                    color=\"primary\"\r\n                  >\r\n                    {utils.getFeaturedInFilmsString(planet.films.length)}\r\n                  </Typography>\r\n                </CardContent>\r\n                <CardActions style={{ width: \"94%\" }}>\r\n                  <Button\r\n                    size=\"large\"\r\n                    onClick={() => getRandomPlanet()}\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    fullWidth\r\n                  >\r\n                    <span style={{ fontWeight: \"bold\" }}>Next</span>\r\n                  </Button>\r\n                </CardActions>\r\n              </>\r\n            )}\r\n          </Card>\r\n        </Box>\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n}\r\n","export function getFeaturedInFilmsString(filmsCount) {\r\n  const filmsString = filmsCount === 1 ? \"film\" : \"films\";\r\n\r\n  return `Featured in ${filmsCount} ${filmsString}`;\r\n}\r\n","import React from \"react\";\r\nimport \"./TwinklingStars.css\";\r\n\r\nexport default function TwinklingStars() {\r\n  return (\r\n    <>\r\n      <div className=\"stars\" />\r\n      <div className=\"twinkling\" />\r\n    </>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport PlanetCard from \"../PlanetCard/PlanetCard\";\nimport { Container } from \"@material-ui/core\";\nimport \"../../index.css\";\nimport TwinklingStars from \"../TwinklingStars/TwinklingStars\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <TwinklingStars />\n        <PlanetCard />\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}